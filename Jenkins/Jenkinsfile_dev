pipeline{
    agent any
    environment{
        CREATE_SCHEMA = 'true'
        RUN_APP = 'true'
        DATABASE_URI=credentials('DATABASE_URI')
        DOCKER_USERNAME=credentials('DOCKER_USERNAME')
        DOCKER_TOKEN=credentials('DOCKER_TOKEN')
        DEPLOYMENT_SERVER=credentials('DEPLOYMENT_SERVER')
        DEPLOYMENT_PATH=credentials('DEPLOYMENT_PATH')
    }
    stages{
        stage('Installing App requirements'){
            steps{
                sh 'bash Jenkins/install_app_requirements.sh'
            }
        }
        stage('Running tests'){
            steps{
                withCredentials([string(credentialsId: 'TEST_DATABASE_URI', variable: 'DATABASE_URI')]) {
                    sh 'bash Jenkins/run_tests.sh'
                }
            }
        }
        stage('Building container image'){
            steps{
                sh 'bash Jenkins/build_images.sh'
            }
        }
        stage('Running container'){
            steps{
                script{
                    if (env.RUN_APP == 'true'){
                        withCredentials([string(credentialsId: 'DATABASE_URI', variable: 'DATABASE_URI')]) {
                            sh 'bash Jenkins/run_container.sh'
                        }
                    }
                }
            }
        }
        // stage('Run app'){
        //     steps{
        //         script{
        //             if (env.RUN_APP == 'true'){
        //                 withCredentials([string(credentialsId: 'DATABASE_URI', variable: 'DATABASE_URI')]) {
        //                     sh 'bash jenkins/run_app.sh'
        //                 }
        //             }
        //         }
        //     }
        // }
    }
    post{
        always{
            junit 'test-reports/unit-tests.xml'
            cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'test-reports/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
        }
        success{
            echo '## Build successful.'
            // sh 'bash Jenkins/build_container.sh'
            // withCredentials([string(credentialsId: 'DATABASE_URI', variable: 'DATABASE_URI')]) {
            //     sh 'bash Jenkins/run_container.sh'
            // }
        }
        failure{
            echo '## Build failed!'
        }
    }
}